-- // üßæ LISTA DE EXERC√çCIOS ‚Äì Revis√£o para Prova de Database \\ --

-- üîπ 0. Criacao do Usuario Simulado

ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;

CREATE USER simulado IDENTIFIED BY simulado;

ALTER USER simulado QUOTA UNLIMITED ON users;

GRANT CREATE SESSION TO simulado;
GRANT CREATE TABLE TO simulado;
GRANT CREATE VIEW TO simulado;
GRANT CREATE SEQUENCE TO simulado;
GRANT CREATE SYNONYM TO simulado;

ALTER USER simulado
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp;

-- üîπ 1. √çndices e Sin√¥nimos

CREATE TABLE PRODUTOS (
    ID NUMBER PRIMARY KEY,
    NOME VARCHAR2(30),
    PRECO NUMBER(10,2),
    ESTOQUE NUMBER
);

INSERT INTO PRODUTOS VALUES (1, 'Arroz', 28.99, 100);
INSERT INTO PRODUTOS VALUES (2, 'Feijao', 15.99, 80);
INSERT INTO PRODUTOS VALUES (3, 'Carne', 89.99, 50);
INSERT INTO PRODUTOS VALUES (4, 'Ovo', 19.99, 60);
INSERT INTO PRODUTOS VALUES (5, 'Frango', 29.99, 70);

-- Crie um √≠ndice n√£o exclusivo sobre a coluna NOME.
CREATE INDEX IDX_PRODUTOS_NOME ON PRODUTOS(NOME);

-- Crie um √≠ndice exclusivo sobre a coluna ID.
CREATE UNIQUE INDEX UQ_PRODUTOS_ID ON PRODUTOS(ID);

-- Verifique os √≠ndices existentes com o comando apropriado.
SELECT INDEX_NAME, TABLE_NAME, UNIQUENESS FROM USER_INDEXES;

-- Crie um sin√¥nimo chamado ITENS que aponte para PRODUTOS.
CREATE SYNONYM ITEMS FOR PRODUTOS;

SELECT * FROM ITENS;

-- Sinonimo publico tem a visibilidade para todos os usuarios que tenham a permissao,
-- ja o privado e exclusivamente do usario ou esquema.


-- üîπ 2. Jun√ß√£o (JOIN)

CREATE TABLE CLIENTES (
    ID INTEGER PRIMARY KEY,
    NOME VARCHAR2(30),
    CIDADE_ID INTEGER,
    FOREIGN KEY (CIDADE_ID) REFERENCES CIDADES(ID)
);

CREATE TABLE CIDADES (
    ID INTEGER PRIMARY KEY,
    NOME VARCHAR(30)
);

INSERT INTO CIDADES (ID, NOME) VALUES (1, 'S√£o Paulo');
INSERT INTO CIDADES (ID, NOME) VALUES (2, 'Rio de Janeiro');
INSERT INTO CIDADES (ID, NOME) VALUES (3, 'Belo Horizonte');

INSERT INTO CLIENTES (ID, NOME, CIDADE_ID) VALUES (1, 'Victor', 1);
INSERT INTO CLIENTES (ID, NOME, CIDADE_ID) VALUES (2, 'Luiz', 2);
INSERT INTO CLIENTES (ID, NOME, CIDADE_ID) VALUES (3, 'Tiago', 3);

-- Fa√ßa um INNER JOIN para listar o nome do cliente e o nome da cidade.
SELECT cl.nome AS cliente, cd.nome AS cidade
FROM clientes cl
INNER JOIN cidades cd ON cl.cidade_id = cd.id;

-- Fa√ßa um LEFT JOIN para listar todos os clientes, mesmo sem cidade cadastrada.
SELECT cl.nome AS cliente, cd.nome AS cidade
FROM clientes cl
LEFT JOIN cidades cd ON cl.cidade_id = cd.id;

-- Fa√ßa um RIGHT JOIN para listar todas as cidades, mesmo sem clientes.
SELECT cl.nome AS cliente, cd.nome AS cidade
FROM clientes cl
RIGHT JOIN cidades cd ON cl.cidade_id = cd.id;

-- Fa√ßa um SELF JOIN (ex.: funcion√°rios e seus gerentes).
-- Exemplo ilustrativo:
CREATE TABLE FUNCIONARIOS (
    ID NUMBER PRIMARY KEY,
    NOME VARCHAR2(30),
    GERENTE_ID NUMBER
);

INSERT INTO FUNCIONARIOS VALUES (1, 'Carlos', NULL);
INSERT INTO FUNCIONARIOS VALUES (2, 'Ana', 1);
INSERT INTO FUNCIONARIOS VALUES (3, 'Pedro', 1);

SELECT f1.nome AS funcionario, f2.nome AS gerente
FROM funcionarios f1
LEFT JOIN funcionarios f2 ON f1.gerente_id = f2.id;

-- Fa√ßa um CROSS JOIN entre CLIENTES e CIDADES.
SELECT cl.nome AS cliente, cd.nome AS cidade
FROM clientes cl
CROSS JOIN cidades cd;

-- Explique o que aconteceria se o crit√©rio de jun√ß√£o fosse omitido.
-- Sem crit√©rio de jun√ß√£o, ocorre um produto cartesiano, combinando todos os registros
-- de uma tabela com todos da outra, podendo gerar milhares de linhas desnecess√°rias.


-- üîπ 3. Processamento de Transa√ß√µes

CREATE TABLE CONTA (
    ID NUMBER PRIMARY KEY,
    TITULAR VARCHAR2(30),
    SALDO NUMBER(10,2)
);

INSERT INTO CONTA VALUES (1, 'Victor', 1000);
INSERT INTO CONTA VALUES (2, 'Luiz', 500);

-- Inicie uma transa√ß√£o
SAVEPOINT inicio_transacao;

-- Transfira R$100 da conta 1 para a conta 2
UPDATE CONTA SET SALDO = SALDO - 100 WHERE ID = 1;
UPDATE CONTA SET SALDO = SALDO + 100 WHERE ID = 2;

-- Use ROLLBACK e verifique se as altera√ß√µes foram desfeitas.
ROLLBACK TO inicio_transacao;

-- Repita a opera√ß√£o e finalize com COMMIT.
UPDATE CONTA SET SALDO = SALDO - 100 WHERE ID = 1;
UPDATE CONTA SET SALDO = SALDO + 100 WHERE ID = 2;
COMMIT;

-- Rollback esta inserido para cancelar mudancas feitas e cancelando o passo de alteracao para o resultado final.
-- Commit e um comando para salvar as mudancas feitas em uma banco.

-- Atomicidade, Consist√™ncia, Isolamento e Durabilidade.
-- Garante integridade e confiabilidade dos dados, Evita perda de dados ou inconsist√™ncia em opera√ß√µes cr√≠ticas e √© essencial para sistemas financeiros, e-commerce, ERPs, e qualquer aplica√ß√£o que manipule informa√ß√µes importantes.


-- üîπ 4. Revis√£o de SELECT

-- Fa√ßa um SELECT com alias de colunas e de tabela.
SELECT p.nome AS produto, p.preco AS valor FROM produtos p;

-- Liste os 3 primeiros registros usando FETCH FIRST.
SELECT * FROM produtos FETCH FIRST 3 ROWS ONLY;

-- Ordene por nome em ordem decrescente.
SELECT * FROM produtos ORDER BY nome DESC;

-- Selecione apenas produtos com pre√ßo maior que 100.
SELECT * FROM produtos WHERE preco > 100;

-- Utilize DISTINCT para eliminar valores repetidos.
SELECT DISTINCT nome FROM produtos;

-- Use BETWEEN, IN, LIKE e IS NULL em consultas separadas.
SELECT * FROM produtos WHERE preco BETWEEN 20 AND 50;
SELECT * FROM produtos WHERE id IN (1,3,5);
SELECT * FROM produtos WHERE nome LIKE '%a%';
SELECT * FROM produtos WHERE estoque IS NULL;

-- Fa√ßa um SELECT aninhado (subconsulta no WHERE).
SELECT * FROM produtos WHERE preco > (SELECT AVG(preco) FROM produtos);

-- Utilize uma fun√ß√£o de agrega√ß√£o (COUNT, AVG, MAX, SUM).
SELECT COUNT(*) AS total, AVG(preco) AS media, MAX(preco) AS maior, SUM(estoque) AS total_estoque FROM produtos;


-- üîπ 5. Sequ√™ncias (SEQUENCE)

CREATE SEQUENCE SEQ_CLIENTE START WITH 1 INCREMENT BY 1;

INSERT INTO clientes VALUES (SEQ_CLIENTE.NEXTVAL, 'Mateus', 1);

SELECT SEQ_CLIENTE.CURRVAL AS atual, SEQ_CLIENTE.NEXTVAL AS proximo FROM dual;

-- Explique o que acontece se uma sequ√™ncia for usada em transa√ß√µes com ROLLBACK.
-- Mesmo que o ROLLBACK seja executado, o valor da sequ√™ncia n√£o volta atr√°s,
-- pois ela √© independente das transa√ß√µes.


-- üîπ 6. Subconsultas

-- Liste todos os produtos cujo pre√ßo √© maior que a m√©dia dos pre√ßos.
SELECT * FROM produtos WHERE preco > (SELECT AVG(preco) FROM produtos);

-- Liste clientes que n√£o fizeram pedidos (NOT IN).
-- Exemplo (supondo tabela PEDIDOS):
CREATE TABLE PEDIDOS (
    ID NUMBER PRIMARY KEY,
    CLIENTE_ID NUMBER,
    FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTES(ID)
);

INSERT INTO PEDIDOS VALUES (1, 1);
INSERT INTO PEDIDOS VALUES (2, 2);

SELECT * FROM clientes WHERE id NOT IN (SELECT cliente_id FROM pedidos);

-- Liste os produtos que aparecem em pelo menos um pedido (EXISTS).
-- Exemplo (supondo tabela ITENS_PEDIDO):
CREATE TABLE ITENS_PEDIDO (
    ID NUMBER PRIMARY KEY,
    PRODUTO_ID NUMBER,
    FOREIGN KEY (PRODUTO_ID) REFERENCES PRODUTOS(ID)
);

INSERT INTO ITENS_PEDIDO VALUES (1, 1);
INSERT INTO ITENS_PEDIDO VALUES (2, 3);

SELECT * FROM produtos p WHERE EXISTS (SELECT 1 FROM itens_pedido ip WHERE ip.produto_id = p.id);

-- Compare o resultado de uma subconsulta correlacionada e n√£o correlacionada.
-- A correlacionada depende de cada linha da consulta externa,
-- j√° a n√£o correlacionada executa apenas uma vez, independentemente da consulta externa.


-- üîπ 7. Usu√°rios e Privil√©gios

CREATE USER teste_user IDENTIFIED BY 1234;

GRANT CREATE SESSION TO teste_user;
GRANT SELECT ON produtos TO teste_user;

REVOKE SELECT ON produtos FROM teste_user;

-- GRANT concede privil√©gios a um usu√°rio, enquanto REVOKE remove esses privil√©gios.

-- Privil√©gios de sistema permitem executar a√ß√µes no banco (como criar tabelas),
-- enquanto privil√©gios de objeto se aplicam a objetos espec√≠ficos (como SELECT em uma tabela).

-- Um papel (ROLE) √© um conjunto de privil√©gios que pode ser atribu√≠do a v√°rios usu√°rios.
-- J√° um usu√°rio (USER) √© uma conta individual que pode receber pap√©is e permiss√µes espec√≠ficas.


-- üîπ 8. Vis√µes (VIEWS)

CREATE TABLE CLIENTES_STATUS (
    ID NUMBER PRIMARY KEY,
    NOME VARCHAR2(30),
    STATUS VARCHAR2(10)
);

INSERT INTO CLIENTES_STATUS VALUES (1, 'Victor', 'Ativo');
INSERT INTO CLIENTES_STATUS VALUES (2, 'Luiz', 'Inativo');
INSERT INTO CLIENTES_STATUS VALUES (3, 'Tiago', 'Ativo');

CREATE VIEW VW_CLIENTES_ATIVOS AS
SELECT * FROM CLIENTES_STATUS WHERE STATUS = 'Ativo';

SELECT * FROM VW_CLIENTES_ATIVOS;

-- Tente fazer um UPDATE na view e explique o resultado.
UPDATE VW_CLIENTES_ATIVOS SET nome = 'Vitor' WHERE id = 1;
-- O UPDATE s√≥ √© permitido se a view for simples (baseada em uma √∫nica tabela e sem fun√ß√µes de grupo).

-- Crie uma view com jun√ß√£o entre CLIENTES e PEDIDOS.
CREATE VIEW VW_CLIENTES_PEDIDOS AS
SELECT c.nome AS cliente, p.id AS pedido_id
FROM clientes c
INNER JOIN pedidos p ON c.id = p.cliente_id;

-- Crie uma view com alias de colunas.
CREATE VIEW VW_PRODUTOS_ALIAS (codigo, descricao, valor) AS
SELECT id, nome, preco FROM produtos;

-- Explique a diferen√ßa entre view simples e view complexa.
-- View simples baseia-se em uma √∫nica tabela e permite DML (INSERT, UPDATE, DELETE).
-- View complexa envolve jun√ß√µes, fun√ß√µes de grupo ou subconsultas e geralmente √© apenas leitura.

-- Explique o que acontece se a tabela base de uma view for removida.
-- Se a tabela base for removida, a view se torna inv√°lida e n√£o pode mais ser consultada
-- at√© que a tabela original seja recriada.