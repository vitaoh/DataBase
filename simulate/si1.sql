-- // üßæ LISTA DE EXERC√çCIOS ‚Äì Revis√£o para Prova de Database \\ --
-- üîπ 1. √çndices e Sin√¥nimos

-- Crie uma tabela chamada PRODUTOS com as colunas ID, NOME, PRECO e ESTOQUE.

CREATE TABLE PRODUTOS (
    ID NUMBER PRIMARY KEY,
    NOME VARCHAR2(30),
    PRECO NUMBER(10,2),
    ESTOQUE NUMBER
);

-- Insira 5 registros de exemplo.

INSERT INTO PRODUTOS VALUES (1, 'Arroz', 28.99, 100);
INSERT INTO PRODUTOS VALUES (2, 'Feijao', 15.99, 80);
INSERT INTO PRODUTOS VALUES (3, 'Carne', 89.99, 50);
INSERT INTO PRODUTOS VALUES (4, 'Ovo', 19.99, 60);
INSERT INTO PRODUTOS VALUES (5, 'Frango', 29.99, 70);

-- Crie um √≠ndice n√£o exclusivo sobre a coluna NOME.

-- Crie um √≠ndice exclusivo sobre a coluna ID.

-- Verifique os √≠ndices existentes com o comando apropriado (USER_INDEXES).

-- Crie um sin√¥nimo chamado ITENS que aponte para PRODUTOS.

CREATE SYNONYM ITEMS FOR PRODUTOS;

-- Execute um SELECT usando o sin√¥nimo em vez do nome original da tabela.

SELECT * FROM ITENS;

-- Explique a diferen√ßa entre um sin√¥nimo p√∫blico e um sin√¥nimo privado.
-- Sinonimo publico tem a visibilidade para todos os usuarios que tenham a permissao, ja o privado e exclusivamente do usario ou esquema.

-- üîπ 2. Jun√ß√£o (JOIN)

-- Crie as tabelas CLIENTES(id, nome, cidade_id) e CIDADES(id, nome).

CREATE TABLE CLIENTES (
    ID INTEGER PRIMARY KEY,
    NOME VARCHAR2(30),
    CIDADE_ID INTEGER,
    FOREIGN KEY (CIDADE_ID) REFERENCES CIDADES(ID)
);

CREATE TABLE CIDADES (
    ID INTEGER PRIMARY KEY,
    NOME VARCHAR(30)
);

-- Insira dados em ambas.

INSERT INTO CIDADES (ID, NOME) VALUES (1, 'S√£o Paulo');
INSERT INTO CIDADES (ID, NOME) VALUES (2, 'Rio de Janeiro');
INSERT INTO CIDADES (ID, NOME) VALUES (3, 'Belo Horizonte');

INSERT INTO CLIENTES (ID, NOME, CIDADE_ID) VALUES (1, 'Victor', 1);
INSERT INTO CLIENTES (ID, NOME, CIDADE_ID) VALUES (2, 'Luiz', 2);
INSERT INTO CLIENTES (ID, NOME, CIDADE_ID) VALUES (3, 'Tiago', 3);

-- Fa√ßa um INNER JOIN para listar o nome do cliente e o nome da cidade.

SELECT cl.cidade_id as cidades, cd.id as clientes
FROM cidades cd
INNER JOIN clientes cl ON cl.cidade_id = cd.id;

-- Fa√ßa um LEFT JOIN para listar todos os clientes, mesmo sem cidade cadastrada.

-- Fa√ßa um RIGHT JOIN para listar todas as cidades, mesmo sem clientes.

-- Fa√ßa um SELF JOIN (ex.: funcion√°rios e seus gerentes).

-- Fa√ßa um CROSS JOIN entre CLIENTES e CIDADES.

-- Explique o que aconteceria se o crit√©rio de jun√ß√£o fosse omitido.

-- üîπ 3. Processamento de Transa√ß√µes

-- Crie uma tabela CONTA(id, titular, saldo).

-- Insira 2 contas com saldos diferentes.

-- Inicie uma transa√ß√£o (BEGIN TRANSACTION).

-- Transfira R$100 da conta 1 para a conta 2 usando UPDATE.

-- Use ROLLBACK e verifique se as altera√ß√µes foram desfeitas.

-- Repita a opera√ß√£o e finalize com COMMIT.

-- Explique a diferen√ßa entre COMMIT e ROLLBACK.

-- O que √© o conceito de ACID e por que √© importante?
-- Atomicidade, Consist√™ncia, Isolamento e Durabilidade.
-- Garante integridade e confiabilidade dos dados, Evita perda de dados ou inconsist√™ncia em opera√ß√µes cr√≠ticas e √© essencial para sistemas financeiros, e-commerce, ERPs, e qualquer aplica√ß√£o que manipule informa√ß√µes importantes.

-- üîπ 4. Revis√£o de SELECT

-- Fa√ßa um SELECT com alias de colunas e de tabela.

-- Liste os 3 primeiros registros usando FETCH FIRST.

-- Ordene por nome em ordem decrescente.

-- Selecione apenas produtos com pre√ßo maior que 100.

-- Utilize DISTINCT para eliminar valores repetidos.

-- Use BETWEEN, IN, LIKE e IS NULL em consultas separadas.

-- Fa√ßa um SELECT aninhado (subconsulta no WHERE).

-- Utilize uma fun√ß√£o de agrega√ß√£o (COUNT, AVG, MAX, SUM).

-- üîπ 5. Sequ√™ncias (SEQUENCE)

-- Crie uma sequ√™ncia chamada SEQ_CLIENTE come√ßando em 1 e incrementando de 1.

-- Use a sequ√™ncia para inserir novos registros em uma tabela CLIENTE.

-- Exiba o valor atual e o pr√≥ximo da sequ√™ncia (CURRVAL, NEXTVAL).

-- Explique o que acontece se uma sequ√™ncia for usada em transa√ß√µes com ROLLBACK.

-- üîπ 6. Subconsultas

-- Liste todos os produtos cujo pre√ßo √© maior que a m√©dia dos pre√ßos.

-- Liste clientes que n√£o fizeram pedidos (NOT IN).

-- Liste os produtos que aparecem em pelo menos um pedido (EXISTS).

-- Compare o resultado de uma subconsulta correlacionada e n√£o correlacionada.

-- üîπ 7. Usu√°rios e Privil√©gios

-- Crie um novo usu√°rio chamado teste_user com senha 1234.

-- Conceda a ele o privil√©gio de criar sess√µes e selecionar na tabela PRODUTOS.

-- Revogue o privil√©gio de sele√ß√£o.

-- Explique a diferen√ßa entre GRANT e REVOKE.

-- O que s√£o privil√©gios de sistema e privil√©gios de objeto?

-- Qual a diferen√ßa entre papel (ROLE) e usu√°rio (USER)?

-- üîπ 8. Vis√µes (VIEWS)

-- Crie uma view chamada VW_CLIENTES_ATIVOS que exibe apenas clientes com status = 'Ativo'.

-- Fa√ßa um SELECT na view.

-- Tente fazer um UPDATE na view e explique o resultado.

-- Crie uma view com jun√ß√£o entre CLIENTES e PEDIDOS.

-- Crie uma view com alias de colunas.

-- Explique a diferen√ßa entre view simples e view complexa.

-- Explique o que acontece se a tabela base de uma view for removida.